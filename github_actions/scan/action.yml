# *********************************************************************
# *************           IBERIA L.A.E.                   *************
# *************       by Software Engineering             *************
# *********************************************************************
# This action yaml represents the different steps to perform 
# for quality and vulnerability source code. 
# use sonarqube and veracode
#
# currently it is only possible to configure 
# two types of languages "java and angular"

#### test composite 
name: 'scan'
description: 'scan of quality and vulnerability code'
inputs:
  # configure project 
  project_name:
    type: string
    required: false
  lenguage-code:
    type: string
    required: false
    default: "java"
  group-name:
    type: string
    required: true
  service-name:
    type: string
    required: true
  service-version:
    type: string
    required: true
  service-package:
    type: string
    required: false
  # control scan code
  scancode-allow:
    type: boolean
    required: false
    default: false
  # control quality code with sonar
  sonarqube-host:
    type: string
    required: false
  sonarqube-user:
    type: string
    required: false
  sonarqube-pwd:
    type: string
    required: false
  sonarqube-token:
    type: string
    required: false
  ref-brach-code:
    type: string
    required: false
  sonarqube-client-version:
    type: string
    required: false
  # Note of developer: pending define referece tool.
      # control vulnerability code for example: veracode
      # vulnerability-host:
      #  required: false
      # vulnerability-user:
      #  required: false
      # vulnerability-token:
      #  required: false
      # control vulnerability code  # if use code artifact repository-host 
runs:
  using: "composite"
  steps:
    ########################################################
    # use temporaly this action but change 
    # to future with script instal setup or install in magine 
    - name: Setup Node 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    #- name: checkout
    #  uses: actions/checkout@v3    
    #######################################
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ inputs.sonarqube-token }}
        SONAR_HOST_URL: "https://sonar.corp.iberia.es"
      with:
        # -Dsonar.qualitygate.wait=true  if the Quality Gate is red, this will make the analysis step fail, even if the actual analysis itself is successful.
        # -Dsonar.qualitygate.timeout=300 You can set the sonar.qualitygate.timeout property to an amount of time (in seconds) that the scanner should wait for a report to be processed. The default is 300 seconds.
        # -Dsonar.login=${{ inputs.sonarqube-user }} 
        # -Dsonar.password=${{ inputs.sonarqube-pwd }}
        # projectBaseDir: src
        # -Dsonar.tests=test/
        # -Dsonar.verbose=true
        args: >
          -Dsonar.host.url=${{ inputs.sonarqube-host }}
          -Dsonar.projectKey=${{ inputs.group-name  }}:${{ inputs.service-name }} 
          -Dsonar.projectName=${{ inputs.service-name  }}
          -Dsonar.projectVersion=${{ inputs.service-version  }} 
          -Dsonar.java.binaries=**/../target/classes
          -Dsonar.language=${{ inputs.lenguage-code  }} 
          -Dsonar.branch.name=${{ inputs.ref-brach-code  }} 
    - name: SonarQube Quality Gate Check
      uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
      # Force to fail step after specific time
      # timeout-minutes: 5
      env:
         SONAR_TOKEN: ${{ inputs.sonarqube-token }}
    # -Dsonar.qualitygate.wait=true  # set this  
    # -Dsonar.qualitygate.timeout=300 You can set the sonar.qualitygate.timeout property to an amount of time (in seconds) that the scanner should wait for a report to be processed. The default is 300 seconds.
    # - name: sonar
    #   working-directory: .github/cicd/scripts
    #   shell: sh
    #   env:
    #     WORKSPACE: ${{ github.workspace }}
    #     LENGUAGE: ${{inputs.lenguage-code}}
    #     REF: ${{ github.ref }}
    #     # get package name generate from step build
    #     GROUP:  ${{ inputs.group_name  }}  
    #     # get package name generate from step build
    #     ARTIFACT:  ${{ inputs.service_name  }}   
    #     # get package name generate from step build
    #     VERSION:  ${{ inputs.service_version  }}     
    #     # get package type extention from step build
    #     PACKAGE: ${{ inputs.service_package }} 
    #     SONAR_URL: ${{ inputs.sonarqube-host }} 
    #     SONAR_USER: ${{ inputs.sonarqube-user }} 
    #     SONAR_SECRET: ${{ inputs.sonarqube-token }} 
    #     SONAR_CLI: ${{ inputs.sonarqube-client-version }}
    #   if: ${{ inputs.scancode }}
    #   run: sonar-scanner.sh

  # Note of develop: pendieng testing and tool implement      
  #    - name: vulnerability-scan
  #      working-directory: .github/cicd/scripts
  #      shell: sh
  #      env:
  #        WORKSPACE: ${{ github.workspace }}
  #        LENGUAGE: ${{inputs.lenguage-code}}
  #        REF: ${{ github.ref }}
  #        # get package name generate from step build
  #        GROUP:  ${{ inputs.group_name  }}  
  #        # get package name generate from step build
  #        ARTIFACT:  ${{ inputs.service_name  }}   
  #        # get package name generate from step build
  #        VERSION:  ${{ inputs.service_version  }}     
  #        # get package type extention from step build
  #        PACKAGE: ${{ inputs.service_package }} 
  #        vulnerability-host: ${{ inputs.vulnerability-host }} 
  #        vulnerability-usr: ${{ inputs.vulnerability-user  }} 
  #        vulnerability-key: ${{ inputs.vulnerability-token }} 
  #      if: ${{ inputs.scancode && startsWith(${ github.ref }, 'refs/heads/main') == true }}
  #      run: pipeline-scan.sh
