# *********************************************************************
# *************           IBERIA L.A.E.                   *************
# *************       by Software Engineering             *************
# *********************************************************************
# This action yaml represents the different steps to perform 
# for a deployment in environment with github workflow
# This action'll need a runner to compile and process data for its use.
#
# currently it is only possible to configure 
# two types of languages "java and angular"

name: CICD

on:
  pull_request:
      # Sequence of patterns matched against refs/heads
      branches:    
        - main
        - develop    
  workflow_call:
    # setting input
    inputs:
      # project name, eguals to product name example ancillaries
      project-name:
        type: string  
        description: 'project global name'
        required: true
      # project name, eguals to product name example ancillaries
      lenguage-code:
        type: string
        description: 'lenguage  programming code for example: java or angular'
        required: true
        default: 'java'  
      # ejecute integration test, soap request or rest
      testIntegration:
        type: boolean
        description: 'active test integration'
        required: false
        default: false
      testIntegration-path:
        type: string
        description: 'path'
        required: false
        # default: '${{ github.workspace }}'
      # control scan code
      scancode:
        type: boolean
        description: 'scan code'
        required: true
        default: false
      # control quality code with sonar
      sonarqube-host:
        type: string
        description: 'sonar host parameter'
        required: false
      sonarqube-user:
        type: string
        description: 'sonar user parameter'
        required: false
      sonarqube-token:
        type: string
        description: 'sonar token parameter'
        required: false
      sonarqube-client-version:
        type: string
        description: 'sonar-scanner client version parameter v.r.f.build'
        required: false

      # Note of developer: pending define referece tool.
      # control vulnerability code for example: veracode
      # vulnerability-host:
      #  description: 'veracode host parameter'
      #  required: false
      # vulnerability-user:
      #  description: 'veracode user parameter'
      #  required: false
      # vulnerability-token:
      #  description: 'veracode token parameter'
      #  required: false
      # control vulnerability code

      ## if use code artifact repository-host
      codeartifact-allow:
        type: string
        description: 'active repositorio codeartifact - default: false'
        required: true
        default: false

      repository-host:
        type: string
        description: 'repository artifact host parameter'
        required: true
      # if use codeartifact then repository-user is owner account id
      repository-user:
        type: string
        description: 'repository artifact user parameter'
        required: true
      repository-token:
        type: string
        description: 'repository artifact token parameter'
        required: true

      # configuration cloud name enviroment
      aws-environment-name:
        type: string
        description: 'Environment name for example: production'
        required: true
        default: 'production'
      aws-environment-prefix:
        type: string
        description: 'Environment prefix name for example: pro'
        required: false
        default: 'pro'
       # configuration cloud secret by enviroment  
      aws-access-key:
        type: string
        description: 'access key aws publish environment: example: production'
        required: false
      aws-secret-acesss-key:
        type: string
        description: 'secret access key aws publish environment example: production'
        required: false
      # configuration cloud name enviroment
      aws-environment-dev-name:
        type: string
        description: 'Development nvironment name for example: development'
        required: false
        default: 'development'
      aws-environment-dev-prefix:
        type: string
        description: 'Environment prefix name for example: dev'
        required: false
        default: 'dev'
       # configuration cloud secret by enviroment  
      aws-access-key-dev:
        type: string
        description: 'access key aws development environment'
        required: false
      aws-secret-acesss-key-dev:
        type: string
        description: 'secret access key aws development environment'
        required: false

      # configuration operational account, this containt shared image 
      aws-access-key-op:
        type: string
        description: 'access key aws operational environment'
        required: false
      aws-secret-acesss-key-op:
        type: string
        description: 'secret access key aws operational environment'
        required: false
env:
  LANGUAGE: ${{ inputs.lenguage-code }}
  # get input name, this name use in dns site and global value. project = product business
  PROJECT:  ${{ inputs.project-name }}  
jobs:
  build:
    name: build
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    # setting output step build to use other jobs steps
    outputs:
      package-groupid-name: ${{ steps.package-generator-name.outputs.package-group }}
      package-artifactid-name: ${{ steps.package-generator-name.outputs.package-artifact }}
      package-version-name: ${{ steps.package-generator-name.outputs.package-version }} 
      package-type-name: ${{ steps.package-generator-name.outputs.package-type-id }}
      package-repository: ${{ steps.registry-repository.outputs.registry-repository-id }}
      package-usr: ${{ steps.registry-repository.outputs.registry-repository-usr }}
      package-key: ${{ steps.registry-repository.outputs.registry-repository-key }}
      package-owner: ${{ steps.registry-repository.outputs.registry-repository-owner }}
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # Step 3 
      - name: Building Artifact
        id: package-generator-name
        run: build.sh
      # Step 4  
      - name: control
        id: control-version
        env:
          # get package name generate from step build
          VERSION:  ${{ jobs.build.outputs.package-version-name }}  
        run: control-version.sh
      # deploy artifact to registry repository
      - name: Registy artifact
        id: registry-repository
        env:
          # get package name generate from step build
          GROUP:  ${{ jobs.build.outputs.package-groupid-name }}  
          # get package name generate from step build
          ARTIFACT:  ${{ jobs.build.outputs.package-artifactid-name }}  
          # get package name generate from step build
          VERSION:  ${{ jobs.build.outputs.package-version-name }}  
          # get package type extention from step build
          PACKAGE: ${{ jobs.build.outputs.package-type-name }}
          # active code artifact and reemplace nexus
          CODEARTIFACT:  ${{ inputs.codeartifact-allow }}
          # DNS hasn't content http:// or https://  
          REPOSITORY_DNS: inputs.repository-host
          REPOSITORY_USER: inputs.repository-user
          REPOSITORY_SECRET: inputs.repository-token
        run: artifact-registry.sh
  scan:
    name: scan-code
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # implement sonar
      # Step 1
      - name: sonar
        env:
          # get package name generate from step build
          GROUP:  ${{ jobs.build.outputs.package-groupid-name }}  
          # get package name generate from step build
          ARTIFACT:  ${{ jobs.build.outputs.package-artifactid-name }}  
          # get package name generate from step build
          VERSION:  ${{ jobs.build.outputs.package-version-name }}  
          # get package type extention from step build
          PACKAGE: ${{ jobs.build.outputs.package-type-name }} 
          SONAR_URL: inputs.sonarqube-host
          SONAR_USER: inputs.sonarqube-user
          SONAR_SECRET: inputs.sonarqube-token
          SONAR_CLI: inputs.sonarqube-client-version
        run: sonar-scanner.sh
  # Note of develop: pendieng testing and tool implement      
  # vulnerability:
  #  name: scan-code
  #  runs-on: [self-hosted]
    # implement veracode
  #  if: ${{ startsWith(${ github.ref }, 'refs/heads/main') == true }}
  #  steps:
        # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
    #  - name: checkout
   #     uses: actions/checkout@v3
  #     # Step 2
  #    - name: vulnerability-scan
  #      shell: bash
  #      env:
  #        # get package name generate from step build
  #        GROUP:  ${{ jobs.build.outputs.package-groupid-name }}  
  #        # get package name generate from step build
  #        ARTIFACT:  ${{ jobs.build.outputs.package-artifactid-name }}  
  #        # get package name generate from step build
  #        VERSION:  ${{ jobs.build.outputs.package-version-name }}  
  #        # get package type extention from step build
  #        PACKAGE: ${{ jobs.build.outputs.package-type-name }} 
  #        vulnerability-host: inputs.vulnerability-host
  #        vulnerability-usr: inputs.vulnerability-user
  #        vulnerability-key: inputs.vulnerability-token
  #      run: |
  #      ${{ env.SCRIPT }}/pipeline-scan.sh
  environment-development:
    name: environment-development
    # runs-on: [self-hosted, dev]
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    outputs:
      shared-number-ids-arn_suffix: ${{ steps.build-environment-generator.shared-ids }} 
      security-group-number-ids: ${{ steps.build-environment-generator.security-group-ids }}
      subnet-number-ids: ${{ steps.build-environment-generator.subnets-ids }}   
      alb-target-group-number-arn: ${{ steps.build-environment-generator.alb-target-group-arn }}
      alb-target-group-number-arn-suffix: ${{ steps.build-environment-generator.alb-target-group-arn-suffix }}
      lb-number-arn-suffix: ${{ steps.build-environment-generator.lb-arn-suffix }}
    env:
      GROUP:  ${{ jobs.build.outputs.package-groupid-name }}   
      # get artifcat name generate from step build
      SERVICE:  ${{ jobs.build.outputs.package-artifactid-name }}
      WORKSPACE: ${{ github.workspace }}
      REF:  ${{ github.ref }}
      # input account integration/preproduction environment
      ENVIROMENT: ${{inputs.aws-environment-name}}
      ENVIROMENT_PREFIX: ${{inputs.aws-environment-prefix}}
      AWS_ACCESS_KEY: ${{ inputs.aws-access-key }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
      # input account development environment
      ENVIROMENT_DEV: ${{inputs.aws-aws-environment-dev-name}}
      ENVIROMENT_PREFIX_DEV: ${{inputs.aws-environment-dev-prefix}}
      AWS_ACCESS_KEY_DEV: ${{ inputs.aws-access-key-dev }}
      AWS_SECRET_ACCESS_KEY_DEV: ${{ inputs.aws-secret-access-key-dev }}
      # reemplace aws secret and access key to profile
      AWS_PROFILE: ''
    if: ${{ startsWith(${ github.ref }, 'refs/heads/develop') == true }}  
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # build image
      # Step 2
      - name: build-environment
        id: build-environment-generator
        run: build-environment.sh
  environment-production:
    name: environment-production
    # runs-on: [self-hosted, pro]
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    outputs:
      shared-number-ids-arn_suffix: ${{ steps.build-environment-generator.shared-ids }} 
      security-group-number-ids: ${{ steps.build-environment-generator.security-group-ids }}
      subnet-number-ids: ${{ steps.build-environment-generator.subnets-ids }}   
      alb-target-group-number-arn: ${{ steps.build-environment-generator.alb-target-group-arn }}
      alb-target-group-number-arn-suffix: ${{ steps.build-environment-generator.alb-target-group-arn-suffix }}
      lb-number-arn-suffix: ${{ steps.build-environment-generator.lb-arn-suffix }}
    env:
      GROUP:  ${{ jobs.build.outputs.package-groupid-name }}   
      # get artifcat name generate from step build
      SERVICE:  ${{ jobs.build.outputs.package-artifactid-name }}
      WORKSPACE: ${{ github.workspace }}
      REF:  ${{ github.ref }}
      # input account integration/preproduction environment
      ENVIROMENT: ${{inputs.aws-environment-name}}
      ENVIROMENT_PREFIX: ${{inputs.aws-environment-prefix}}
      AWS_ACCESS_KEY: ${{ inputs.aws-access-key }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
      # input account development environment
      ENVIROMENT_DEV: ${{inputs.aws-aws-environment-dev-name}}
      ENVIROMENT_PREFIX_DEV: ${{inputs.aws-environment-dev-prefix}}
      AWS_ACCESS_KEY_DEV: ${{ inputs.aws-access-key-dev }}
      AWS_SECRET_ACCESS_KEY_DEV: ${{ inputs.aws-secret-access-key-dev }}
      # reemplace aws secret and access key to profile
      AWS_PROFILE: ''
    if: ${{ startsWith(${ github.ref }, 'refs/heads/main') == true }}
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # build image
      # Step 2
      - name: build-environment
        id: build-environment-generator
        run: build-environment.sh      
  instance:
    name: development-instance
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    env:
      # get package name generate from step build
      GROUP:  ${{ jobs.build.outputs.package-groupid-name }}   
      # get package name generate fromstep build
      ARTIFACT:  ${{ jobs.build.outputs.package-artifactid-name }}   
      # get package name generate from step build
      VERSION:  ${{ jobs.build.outputs.package-version-name }}   
       # get package type extention from step build
      PACKAGE: ${{ jobs.build.outputs.package-type-name }}
      # active code artifact and reemplace nexus
      CODEARTIFACT:  ${{ inputs.codeartifact-allow }}
      # get path repository package generate font step build
      REPOSITORY_PATH:  ${{ jobs.build.outputs.package-repository }}   
      REPOSITORY_HOST: inputs.repository-host
      # change user to read, now use write
      REPOSITORY_OWNER:  ${{ jobs.build.outputs.package-owner }}    
      REPOSITORY_USER:  ${{ jobs.build.outputs.package-usr }}    
      REPOSITORY_SECRET: ${{ jobs.build.outputs.package-key }}     # change token to read, now use write
      
      SECURITY_GROUPS: ${{ jobs.environment.outputs.security-group-number-ids }}
      SUBNETS: ${{ jobs.environment.outputs.subnet-number-ids }}
      
      # input account development environment
      AWS_ACCESS_KEY_DEV: ${{ inputs.aws-access-key-dev }}
      AWS_SECRET_ACCESS_KEY_DEV: ${{ inputs.aws-secret-access-key-dev }}
       # reemplace aws secret and access key to profile
      AWS_PROFILE: ''
    if: ${{ startsWith(${ github.ref }, 'refs/heads/develop') == true }}
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # build instance
      # Step 2
      - name: build instance
        id: instance-generator
        run: build-instance.sh  
  image:
    name: build-image
    # runs-on: [self-hosted, op]
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    outputs:
      image-number-id: ${{ steps.image-generator.outputs.image-id }}
    env:
      # get package name generate from step build   
      GROUP:  ${{ jobs.build.outputs.package-groupid-name }}   
      # get package name generate fromstep build
      ARTIFACT:  ${{ jobs.build.outputs.package-artifactid-name }}   
      # get package name generate from step build
      VERSION:  ${{ jobs.build.outputs.package-version-name }} 
      # get package type extention from step build  
      PACKAGE: ${{ jobs.build.outputs.package-type-name }}
      # active code artifact and reemplace nexus
      CODEARTIFACT:  ${{ inputs.codeartifact-allow }
      # get path repository package generate font step build
      REPOSITORY_PATH:  ${{ jobs.build.outputs.package-repository }}   
      REPOSITORY_HOST:  ${{ inputs.repository-host  }} 
      # change user to read, now use write
      REPOSITORY_OWNER:  ${{ jobs.build.outputs.package-owner }}    
      REPOSITORY_USER:  ${{ jobs.build.outputs.package-usr }}    
      REPOSITORY_SECRET: ${{ jobs.build.outputs.package-key }}     # change token to read, now use write
      SECURITY_GROUPS: ${{ jobs.environment.outputs.security-group-number-ids }}
      SUBNETS: ${{ jobs.environment.outputs.subnet-number-ids }}
      # shared ami with environment.
      SHARED: ${{ jobs.environment.outputs.shared-number-ids }}  
      
      # secret account operational. 
      AWS_ACCESS_KEY_OP:  ${{ inputs.aws-access-key-op }}                   
      AWS_SECRET_ACCESS_KEY_OP: ${{ inputs.aws-secret-access-key-op }}
      
      # reemplace aws secret and access key to profile
      AWS_PROFILE: ''
    if: ${{ startsWith(${ github.ref }, 'refs/heads/main') == true }}  
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # build image
      # Step 1
      - name: build image
        id: image-generator
        shell: bash
        run: build-image.sh
  deploy:
    name: production-deploy
    # runs-on: [self-hosted, pro]
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    env:
      TEST: inputs.testIntegration
      AMI_ID: ${{ jobs.image.outputs.image-number-id }}
      # get package name generate from step build
      SERVICE:  ${{ jobs.build.outputs.package-artifactid-name }}  
      # get package version generate from step build   
      AMI_VERSION:  ${{ jobs.build.outputs.package-version-name }}  
      SECURITY_GROUPS: ${{ jobs.environment.outputs.security-group-number-ids }}
      SUBNETS: ${{ jobs.environment.outputs.subnet-number-ids }}
      ALB_TARGET_GROUP: ${{ jobs.environment.outputs.alb-target-group-number-arn}}
      ALB_TARGET_GROUP_SUFFIX: ${{ jobs.environment.outputs.alb-target-group-number-arn-suffix}}
      LB_SUFFIX: ${{ jobs.environment.outputs.lb-number-arn-suffix}}

      # input account integration/preproduction environment
      ENVIROMENT: ${{inputs.aws-aws-environment-name}}
      ENVIROMENT_PREFIX: ${{inputs.aws-environment-prefix}}
      AWS_ACCESS_KEY: ${{ inputs.aws-access-key }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
       # reemplace aws secret and access key to profile
      AWS_PROFILE: ''
    if: ${{ startsWith(${ github.ref }, 'refs/heads/main') == true }} 
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # instance software.
      # Step 2
      - name: Deploy
        run: terraform-deploy.sh 
      # Step 3
      - name: Health Check
        run: health-checking.sh
      # Step 4
      - name: Integration tests
        run: integration-tests.sh 
  # create de tag release en github. 
  # use same release and put image id in description 
  # or release note. necessary to next environment 
  # NOTE OF DEVELOPER: pending release process
  tag:
    name: create-tag
    runs-on: [self-hosted]
    defaults:
      run:
        shell: bash
        working-directory:  ${{ github.workspace }}/scripts/
    env:
      # version artifact  = VERSION
      TAG: ${{ jobs.build.outputs.package-version-name }}
      # funtional version of product. now default use tag version.    
      RELEASE:  ${{ jobs.build.outputs.package-version-name }}  
      BODY: "build image id: ${{ jobs.image.outputs.image-number-id }}"
    if: ${{ startsWith(${ github.ref }, 'refs/heads/main') == true }} 
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v3
      # Step 2 
      - name: upload
        shell: bash
        run: |
          # pending code. 
          # git tag ${TAG}
  # clean workspace and other reference. end process. NOTE OF DEVELOPER: pending clean
  # clean:
  #   name: clean
  #   runs-on: [self-hosted]
