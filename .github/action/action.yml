# *********************************************************************
# *************           IBERIA L.A.E.                   *************
# *************       by Software Engineering             *************
# *********************************************************************
# This action yaml represents the different steps to perform 
# for a deployment in environment with github workflow
# This action'll need a runner to compile and process data for its use.
#
# currently it is only possible to configure 
# two types of languages "java and angular"

name: CICD
description: 'continuos integration'
# setting input
inputs:
  # ejecute integration test, soap request or rest
  testIntegration:
    description: 'active test integration'
    required: false
    default: false
  testIntegration-path:
    description: 'path'
    required: false
    default: '${{ github.workspace }}'
  # control scan code
  scancode:
    description: 'scan code'
    required: true
    default: false
  # control quality code with sonar
  sonarqube_host:
    description: 'sonar host parameter'
    required: false
  sonarqube_user:
    description: 'sonar user parameter'
    required: false
  sonarqube_token:
    description: 'sonar token parameter'
    required: false
  # control vulnerability code with kiuwan
  kiuwan_host:
    description: 'kiuwan host parameter'
    required: false
  kiuwan_user:
    description: 'kiuwan user parameter'
    required: false
  kiuwan_token:
    description: 'kiuwan token parameter'
    required: false
   # control vulnerability code with kiuwan
  repository_host:
    description: 'repository artifact host parameter'
    required: true
  repository_user:
    description: 'repository artifact user parameter'
    required: true
  repository_token:
    description: 'repository artifact token parameter'
    required: true  
  # terraform module
  terraform-version:
    description: 'terraform module'
    required: false
  terraform-module-path:
    description: 'path modules terraform'
    required: false

on: [pull_request]
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - main
      - develop
jobs:
  build:
    name: build
    runs-on: [self-hosted]
    env:
      SCRIPT: ${{ github.workspace }}/.github/action/utils/
      LANGUAGE:
    steps:
      # Nota: 
      # Remplace action's with custom shell script to future
      # for segurity - location in (../utils/)
      # Step 1 
      - name: checkout
        uses: actions/checkout@v2
      # Step 2 - Reemplace with install process jdk and configure path environment
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      # Step 3 - Reemplace with install process node.js
      - name: Set up Node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      # Step 4
      - name: Building Artifact
        shell: bash
        run: |
        ${{ env.SCRIPT }}/build-maven.sh ${{ github.workspace }} ${{ env.LANGUAGE }}
    steps:
      # implement sonar
      # Step 1
      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3
      # Step 2
      - name: Scan
        shell: bash
        env:
          SONAR_URL: inputs.sonarqube_host
          SONAR_USER: inputs.sonarqube_user
          SONAR_SECRET: inputs.sonarqube_token
        run: |
        ${{ env.SCRIPT }}/sonar-scanner.sh ${{ env.SONAR_URL }} ${{ env.SONAR_USER }} ${{ env.SONAR_SECRET }} ${{ env.LANGUAGE }} ${{ github.workspace }} ${{ github.ref }}
    steps:
      # deploy artifact to registry repository
      - name: Registy Artifact
        shell: bash
        env:
          # DNS hasn't content http:// or https://
          REPOSITORY_DNS: inputs.repository_host
          REPOSITORY_USER: inputs.repository_user
          REPOSITORY_SECRET: inputs.repository_token
        run: |
        # path in script repository nexus is /repository/snapshots/ and /repository/releases/
        ${{ env.SCRIPT }}/nexus-registry.sh ${{ env.REPOSITORY_DNS }} ${{ env.REPOSITORY_USER }} ${{ env.REPOSITORY_SECRET }} ${{ env.LANGUAGE }} ${{ github.ref }}
  image:
    name: image
    runs-on: [self-hosted]
    outputs:
      image-number-id:
        description: "image number id"
        value: ${{ steps.image-generator.outputs.image-id }}
    env:
      SCRIPT: ${{ github.workspace }}/.github/action/utils/
      USER:
      DEPARTAMENT:
      LANGUAGE:
      ARTIFACT: 
      REPOSITORY_USER: inputs.repository_user    # change user to read, now use write
      REPOSITORY_SECRET: inputs.repository_token   # change token to read, now use write
    steps:
      # build image
      # Step 1
      - id: image-generator
      - name: build image
        shell: bash
        run: |
        ${{ env.SCRIPT }}/build-image.sh ${{ env.USER }} ${{ env.DEPARTAMENT }} ${{ env.LANGUAGE }} ${{ env.ARTIFACT }} ${{ env.REPOSITORY_USER }} ${{ env.REPOSITORY_SECRET }}
        
  deploy:
    name: deploy
    runs-on: [self-hosted]
    env:
      SCRIPT: ${{ github.workspace }}/.github/action/utils/
      TEST: inputs.testIntegration
      LANGUAGE:
      AMI_ID: ${{ jobs.image.outputs.image-number-id }}
    steps:
      # instance software.
      # Step 1
      - name: Deploy
        shell: bash
        run: |
        # NOTE OF DEVELOP
        # ${{ env.PROJECT }} from file configuration
        # ${{ env.AMI_VERSION }} from pom version
         
        ${{ env.SCRIPT }}/terraform-deploy.sh ${{ env.PROJECT }} ${{ env.AMI_VERSION }} ${{ env.AMI_ID }} 
      # Step 2
      - name: Health Check
        shell: bash
        run: |
        ${{ env.SCRIPT }}/health-checking.sh ${{ env.aws_alb_target_group_arn }}
      # Step 3
      - name: Integration tests
        shell: bash
        run: |
        ${{ env.SCRIPT }}/get-tools.sh ${{ env.TEST }}
        ${{ env.SCRIPT }}/integration-tests.sh ${{ env.TEST }}
        
